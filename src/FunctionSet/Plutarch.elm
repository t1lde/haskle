module FunctionSet.Plutarch exposing (plutarch)

plutarch : List String
plutarch =
  [ "(#!!) :: PIsListLike l a => Term s (l a) -> Term s PInteger -> Term s a"
  , "(#$) :: Term s (a :--> b) -> Term s a -> Term s b"
  , "(#&&) :: Term s PBool -> Term s PBool -> Term s PBool"
  , "(#) :: Term s (a :--> b) -> Term s a -> Term s b"
  , "(#<) :: POrd t => Term s t -> Term s t -> Term s PBool"
  , "(#<=) :: POrd t => Term s t -> Term s t -> Term s PBool"
  , "(#==) :: PEq t => Term s t -> Term s t -> Term s PBool"
  , "(#||) :: Term s PBool -> Term s PBool -> Term s PBool"
  , "(>>) :: (x -> Term s a) -> x -> Term s a"
  , "(>>=) :: (x -> Term s a) -> x -> Term s a"
  , "hrecField :: forall name a as b c s. (IndexLabel name as ~ a, ElemOf name a as, Term s (PAsData b) ~ a, PFromDataable b c) => HRec as -> Term s c"
  , "padaOnlyValue :: Term s (PValue 'Sorted v :--> PValue 'Sorted v)"
  , "padaSymbol :: Term s PCurrencySymbol"
  , "padaSymbolData :: Term s (PAsData PCurrencySymbol)"
  , "padaToken :: Term s PTokenName"
  , "padaTokenData :: Term s (PAsData PTokenName)"
  , "pall :: PIsData v => Term s ((v :--> PBool) :--> (PMap _ k v :--> PBool))"
  , "pall :: PIsListLike list a => Term s ((a :--> PBool) :--> (list a :--> PBool))"
  , "pand :: Term s (PBool :--> (PDelayed PBool :--> PDelayed PBool))"
  , "pand' :: Term s (PBool :--> (PBool :--> PBool))"
  , "pany :: PIsData v => Term s ((v :--> PBool) :--> (PMap _ k v :--> PBool))"
  , "pany :: PIsListLike list a => Term s ((a :--> PBool) :--> (list a :--> PBool))"
  , "papp :: Term s (a :--> b) -> Term s a -> Term s b"
  , "pasByteStr :: Term s (PData :--> PByteString)"
  , "pasConstr :: Term s (PData :--> PBuiltinPair PInteger (PBuiltinList PData))"
  , "pasDataSum :: PIsDataRepr a => Term s a -> Term s (PDataSum (PIsDataReprRepr a))"
  , "pasInt :: Term s (PData :--> PInteger)"
  , "pasList :: Term s (PData :--> PBuiltinList PData)"
  , "pasMap :: Term s (PData :--> PBuiltinList (PBuiltinPair PData PData))"
  , "passertPositive :: Term s (PValue 'Sorted 'NonZero :--> PValue 'Sorted 'Positive)"
  , "passertSorted :: (POrd k, PIsData k, PIsData v) => Term s (PMap _ k v :--> PMap 'Sorted k v)"
  , "pblake2b_256 :: Term s (PByteString :--> PByteString)"
  , "pbuiltinPairFromTuple :: Term s (PAsData (PTuple a b)) -> Term s (PAsData (PBuiltinPair (PAsData a) (PAsData b)))"
  , "pbyteStr :: ByteString -> Term s PByteString"
  , "pchooseListBuiltin :: Term s (PBuiltinList a :--> (b :--> (b :--> b)))"
  , "pcon :: PCon a => a s -> Term s a"
  , "pconRepr :: PIsDataRepr a => a s -> Term s (PDataSum (PIsDataReprRepr a))"
  , "pconcat :: PIsListLike list a => Term s (list a :--> (list a :--> list a))"
  , "pcons :: (PListLike list, PElemConstraint list a) => Term s (a :--> (list a :--> list a))"
  , "pconsBS :: Term s (PInteger :--> (PByteString :--> PByteString))"
  , "pconstant :: forall p s. PLift p => PLifted p -> Term s p"
  , "pconstantData :: forall p h s. (ToData h, PLifted p ~ h, PConstanted h ~ p) => h -> Term s (PAsData p)"
  , "pconstantPositiveSingleton :: ClosedTerm PCurrencySymbol -> ClosedTerm PTokenName -> ClosedTerm PInteger -> ClosedTerm (PValue 'Sorted 'Positive)"
  , "pconstantSingleton :: ClosedTerm PCurrencySymbol -> ClosedTerm PTokenName -> ClosedTerm PInteger -> ClosedTerm (PValue 'Sorted 'NonZero)"
  , "pconstrBuiltin :: Term s (PInteger :--> (PBuiltinList PData :--> PAsData (PBuiltinPair PInteger (PBuiltinList PData))))"
  , "pconvertLists :: forall f g a s. (PIsListLike f a, PIsListLike g a) => Term s (f a :--> g a)"
  , "pdata :: PIsData a => Term s a -> Term s (PAsData a)"
  , "pdataImpl :: PIsData a => Term s a -> Term s PData"
  , "pdataLiteral :: Data -> Term s PData"
  , "pdcons :: forall label a l s. Term s (PAsData a :--> (PDataRecord l :--> PDataRecord ((label := a) : l)))"
  , "pdecodeUtf8 :: Term s (PByteString :--> PString)"
  , "pdelay :: Term s a -> Term s (PDelayed a)"
  , "pdelete :: (POrd k, PIsData k) => Term s (k :--> (PMap 'Sorted k v :--> PMap 'Sorted k v))"
  , "pdenominator :: Term s (PRational :--> PInteger)"
  , "pdifference :: (PIsData k, PIsData a, PIsData b) => Term s (PMap g k a :--> (PMap _ k b :--> PMap g k a))"
  , "pdiv :: PIntegral a => Term s (a :--> (a :--> a))"
  , "pdnil :: Term s (PDataRecord '[])"
  , "pdowncastF :: forall a b (p :: PType -> PType) s. (PSubtype a b, PContravariant p) => Proxy p -> Term s (p a) -> Term s (p b)"
  , "pdrop :: PIsListLike list a => Natural -> Term s (list a) -> Term s (list a)"
  , "pdropDataRecord :: KnownNat n => Proxy n -> Term s (PDataRecord xs) -> Term s (PDataRecord (Drop n xs))"
  , "pelem :: (PIsListLike list a, PEq a) => Term s (a :--> (list a :--> PBool))"
  , "pelemAt :: PIsListLike l a => Term s (PInteger :--> (l a :--> a))"
  , "pelimList :: (PListLike list, PElemConstraint list a) => (Term s a -> Term s (list a) -> Term s r) -> Term s r -> Term s (list a) -> Term s r"
  , "pempty :: Term s (PMap 'Sorted k v)"
  , "pencodeUtf8 :: Term s (PString :--> PByteString)"
  , "perror :: Term s a"
  , "pfield :: forall name p s a as n b. (PDataFields p, as ~ PFields p, n ~ PLabelIndex name as, KnownNat n, a ~ PUnLabel (IndexList n as), PFromDataable a b) => Term s (p :--> b)"
  , "pfilter :: PIsData v => Term s ((v :--> PBool) :--> (PMap g k v :--> PMap g k v))"
  , "pfilter :: PIsListLike list a => Term s ((a :--> PBool) :--> (list a :--> list a))"
  , "pfind :: PIsListLike l a => Term s ((a :--> PBool) :--> (l a :--> PMaybe a))"
  , "pfindWithDefault :: (PIsData k, PIsData v) => Term s (v :--> (k :--> (PMap _ k v :--> v)))"
  , "pfix :: Term s (((a :--> b) :--> (a :--> b)) :--> (a :--> b))"
  , "pfoldAt :: (PIsData k, PIsData v) => Term s (k :--> (r :--> ((PAsData v :--> r) :--> (PMap _ k v :--> r))))"
  , "pfoldl :: PIsListLike list a => Term s ((b :--> (a :--> b)) :--> (b :--> (list a :--> b)))"
  , "pfoldl' :: PIsListLike list a => (forall s. Term s b -> Term s a -> Term s b) -> Term s (b :--> (list a :--> b))"
  , "pfoldr :: PIsListLike list a => Term s ((a :--> (b :--> b)) :--> (b :--> (list a :--> b)))"
  , "pfoldr' :: PIsListLike list a => (forall s. Term s a -> Term s b -> Term s b) -> Term s (b :--> (list a :--> b))"
  , "pfoldrLazy :: PIsListLike list a => Term s ((a :--> (PDelayed b :--> b)) :--> (b :--> (list a :--> b)))"
  , "pforce :: Term s (PDelayed a) -> Term s a"
  , "pforgetData :: forall s a. Term s (PAsData a) -> Term s PData"
  , "pforgetPositive :: Term s (PValue 'Sorted 'Positive) -> Term s (PValue k a)"
  , "pforgetSorted :: Term s (PMap 'Sorted k v) -> Term s (PMap g k v)"
  , "pforgetSorted :: Term s (PValue 'Sorted a) -> Term s (PValue k b)"
  , "pfromAscList :: (POrd k, PIsData k, PIsData v) => Term s (PBuiltinMap k v :--> PMap 'Sorted k v)"
  , "pfromData :: PIsData a => Term s (PAsData a) -> Term s a"
  , "pfromDataImpl :: PIsData a => Term s (PAsData a) -> Term s a"
  , "pfromInteger :: Term s (PInteger :--> PRational)"
  , "pfromJust :: Term s (PMaybe a :--> a)"
  , "pfstBuiltin :: Term s (PBuiltinPair a b :--> a)"
  , "phead :: (PListLike list, PElemConstraint list a) => Term s (list a :--> a)"
  , "phexByteStr :: HasCallStack => String -> Term s PByteString"
  , "phoistAcyclic :: HasCallStack => ClosedTerm a -> Term s a"
  , "pif :: Term s PBool -> Term s a -> Term s a -> Term s a"
  , "pif' :: Term s (PBool :--> (a :--> (a :--> a)))"
  , "pindexBS :: Term s (PByteString :--> (PInteger :--> PInteger))"
  , "pindexDataRecord :: KnownNat n => Proxy n -> Term s (PDataRecord as) -> Term s (PAsData (PUnLabel (IndexList n as)))"
  , "pinl :: Term s a -> (Term s a -> Term s b) -> Term s b"
  , "pinsert :: (POrd k, PIsData k, PIsData v) => Term s (k :--> (v :--> (PMap 'Sorted k v :--> PMap 'Sorted k v)))"
  , "pinsertData :: (POrd k, PIsData k) => Term s (PAsData k :--> (PAsData v :--> (PMap 'Sorted k v :--> PMap 'Sorted k v)))"
  , "pisAdaOnlyValue :: Term s (PValue 'Sorted 'Positive :--> PBool)"
  , "plam :: forall c. PLamN a b s => (Term s c -> a) -> Term s (c :--> b)"
  , "plam' :: (Term s a -> Term s b) -> Term s (a :--> b)"
  , "plength :: PIsListLike list a => Term s (list a :--> PInteger)"
  , "plengthBS :: Term s (PByteString :--> PInteger)"
  , "plet :: Term s a -> (Term s a -> Term s b) -> Term s b"
  , "pletFields :: forall fs a s b ps bs. (PDataFields a, ps ~ PFields a, bs ~ Bindings ps fs, BindFields ps bs) => Term s a -> (HRecOf a fs s -> Term s b) -> Term s b"
  , "pletrec :: forall r s. (Distributive r, Traversable r) => (r (Term s) -> r (Term s)) -> Term s (PRecord r)"
  , "plift :: forall p. (HasCallStack, PLift p) => ClosedTerm p -> PLifted p"
  , "plistEquals :: (PIsListLike list a, PEq a) => Term s (list a :--> (list a :--> PBool))"
  , "plistFromTx :: Term s (PTxList a :--> PList a)"
  , "plistToTx :: Term s (PList a :--> PTxList a)"
  , "plookup :: (PIsData k, PIsData v) => Term s (k :--> (PMap _ k v :--> PMaybe v))"
  , "plookupData :: (PIsData k, PIsData v) => Term s (PAsData k :--> (PMap _ k v :--> PMaybe (PAsData v)))"
  , "plovelaceValueOf :: Term s (PValue 'Sorted v :--> PInteger)"
  , "pmap :: (PIsData a, PIsData b) => Term s ((a :--> b) :--> (PMap g k a :--> PMap g k b))"
  , "pmap :: (PListLike list, PElemConstraint list a, PElemConstraint list b) => Term s ((a :--> b) :--> (list a :--> list b))"
  , "pmapData :: Term s ((PAsData a :--> PAsData b) :--> (PMap g k a :--> PMap g k b))"
  , "pmapMaybe :: (PIsData a, PIsData b) => Term s ((a :--> PMaybe b) :--> (PMap g k a :--> PMap g k b))"
  , "pmapMaybeData :: Term s ((PAsData a :--> PMaybe (PAsData b)) :--> (PMap g k a :--> PMap g k b))"
  , "pmatch :: PMatch a => Term s a -> (a s -> Term s b) -> Term s b"
  , "pmatchDataSum :: Term s (PDataSum defs) -> DataReprHandlers out defs s -> Term s out"
  , "pmatchRepr :: forall s b. PIsDataRepr a => Term s (PDataSum (PIsDataReprRepr a)) -> (a s -> Term s b) -> Term s b"
  , "pmaybeFromAsData :: PFromDataable a b => Term s (PAsData a) -> Term s b"
  , "pmaybeFromTx :: Term s (PTxMaybe a :--> PMaybe a)"
  , "pmaybeToTx :: Term s (PMaybe a :--> PTxMaybe a)"
  , "pmod :: PIntegral a => Term s (a :--> (a :--> a))"
  , "pnil :: (PListLike list, PElemConstraint list a) => Term s (list a)"
  , "pnoAdaValue :: Term s (PValue 'Sorted v :--> PValue 'Sorted v)"
  , "pnormalize :: Term s (PValue 'Sorted _ :--> PValue 'Sorted 'NonZero)"
  , "pnot :: Term s (PBool :--> PBool)"
  , "pnull :: (PListLike list, PElemConstraint list a) => Term s (list a :--> PBool)"
  , "pnumerator :: Term s (PRational :--> PInteger)"
  , "popaque :: Term s a -> Term s POpaque"
  , "por :: Term s (PBool :--> (PDelayed PBool :--> PDelayed PBool))"
  , "por' :: Term s (PBool :--> (PBool :--> PBool))"
  , "ppairDataBuiltin :: Term s (PAsData a :--> (PAsData b :--> PBuiltinPair (PAsData a) (PAsData b)))"
  , "pproperFraction :: Term s (PRational :--> PPair PInteger PRational)"
  , "pquot :: PIntegral a => Term s (a :--> (a :--> a))"
  , "precList :: PIsListLike list a => (Term s (list a :--> r) -> Term s a -> Term s (list a) -> Term s r) -> (Term s (list a :--> r) -> Term s r) -> Term s (list a :--> r)"
  , "preduce :: Term s (PRational :--> PRational)"
  , "prem :: PIntegral a => Term s (a :--> (a :--> a))"
  , "prememberData :: forall (p :: PType -> PType) s. Proxy p -> Term s (p PData) -> Term s (p (PAsData PData))"
  , "prememberData' :: forall a (p :: PType -> PType) s. PSubtype PData a => Proxy p -> Term s (p a) -> Term s (p (PAsData a))"
  , "pround :: Term s (PRational :--> PInteger)"
  , "psha2_256 :: Term s (PByteString :--> PByteString)"
  , "psha3_256 :: Term s (PByteString :--> PByteString)"
  , "pshow :: PShow a => Term s a -> Term s PString"
  , "pshowList :: forall list a s. (PShow a, PIsListLike list a) => Term s (list a :--> PString)"
  , "psingleton :: (PIsData k, PIsData v) => Term s (k :--> (v :--> PMap 'Sorted k v))"
  , "psingleton :: PIsListLike list a => Term s (a :--> list a)"
  , "psingleton :: Term s (PCurrencySymbol :--> (PTokenName :--> (PInteger :--> PValue 'Sorted 'NonZero)))"
  , "psingletonData :: Term s (PAsData PCurrencySymbol :--> (PAsData PTokenName :--> (PAsData PInteger :--> PValue 'Sorted 'NonZero)))"
  , "psingletonData :: Term s (PAsData k :--> (PAsData v :--> PMap 'Sorted k v))"
  , "psliceBS :: Term s (PInteger :--> (PInteger :--> (PByteString :--> PByteString)))"
  , "psndBuiltin :: Term s (PBuiltinPair a b :--> b)"
  , "ptail :: (PListLike list, PElemConstraint list a) => Term s (list a :--> list a)"
  , "pto :: Term s a -> forall b. Term s (PInner a b)"
  , "ptoFields :: PDataFields a => Term s a -> Term s (PDataRecord (PFields a))"
  , "ptrace :: Term s PString -> Term s a -> Term s a"
  , "ptraceError :: Term s PString -> Term s a"
  , "ptraceIfFalse :: Term s PString -> Term s PBool -> Term s PBool"
  , "ptraceIfTrue :: Term s PString -> Term s PBool -> Term s PBool"
  , "ptraceShowId :: PShow a => Term s a -> Term s a"
  , "ptruncate :: Term s (PRational :--> PInteger)"
  , "ptryFrom :: forall b a s r. PTryFrom a b => Term s a -> ((Term s b, Reduce (PTryFromExcess a b s)) -> Term s r) -> Term s r"
  , "ptryIndex :: PIsListLike list a => Natural -> Term s (list a) -> Term s a"
  , "ptryIndexDataSum :: KnownNat n => Proxy n -> Term s (PDataSum (def : defs) :--> PDataRecord (IndexList n (def : defs)))"
  , "ptryUncons :: PIsListLike list a => Term s (list a :--> PPair a (list a))"
  , "ptuple :: Term s (PAsData a :--> (PAsData b :--> PTuple a b))"
  , "ptupleFromBuiltin :: Term s (PAsData (PBuiltinPair (PAsData a) (PAsData b))) -> Term s (PAsData (PTuple a b))"
  , "punDataSum :: Term s (PDataSum '[def] :--> PDataRecord def)"
  , "puncons :: PIsListLike list a => Term s (list a :--> PMaybe (PPair a (list a)))"
  , "punionWith :: Term s ((PInteger :--> (PInteger :--> PInteger)) :--> (PValue 'Sorted _ :--> (PValue 'Sorted _ :--> PValue 'Sorted 'NoGuarantees)))"
  , "punionWithData :: (POrd k, PIsData k) => Term s ((PAsData v :--> (PAsData v :--> PAsData v)) :--> (PMap 'Sorted k v :--> (PMap 'Sorted k v :--> PMap 'Sorted k v)))"
  , "punsafeCoerce :: Term s a -> Term s b"
  , "punsafeConstant :: Some (ValueOf DefaultUni) -> Term s a"
  , "pupcast :: PSubtype a b => Term s b -> Term s a"
  , "pupcastF :: forall a b (p :: PType -> PType) s. (PSubtype a b, PCovariant p) => Proxy p -> Term s (p b) -> Term s (p a)"
  , "pvalueOf :: Term s (PValue _ _ :--> (PCurrencySymbol :--> (PTokenName :--> PInteger)))"
  , "pverifySignature :: Term s (PByteString :--> (PByteString :--> (PByteString :--> PBool)))"
  , "pzip :: (PListLike list, PElemConstraint list a, PElemConstraint list b, PElemConstraint list (PPair a b)) => Term s (list a :--> (list b :--> list (PPair a b)))"
  , "pzipWith :: (PListLike list, PElemConstraint list a, PElemConstraint list b, PElemConstraint list c) => Term s ((a :--> (b :--> c)) :--> (list a :--> (list b :--> list c)))"
  , "pzipWith' :: (PListLike list, PElemConstraint list a, PElemConstraint list b, PElemConstraint list c) => (Term s a -> Term s b -> Term s c) -> Term s (list a :--> (list b :--> list c))"
  , "runTermCont :: TermCont @r s a -> (a -> Term s r) -> Term s r"
  , "tcont :: ((a -> Term s r) -> Term s r) -> TermCont @r s a"
  , "unTermCont :: TermCont @a s (Term s a) -> Term s a"
  ]
